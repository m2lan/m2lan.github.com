<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识记录</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.golearns.org/"/>
  <updated>2017-05-25T15:20:26.000Z</updated>
  <id>http://blog.golearns.org/</id>
  
  <author>
    <name>M2</name>
    <email>763960267@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cut</title>
    <link href="http://blog.golearns.org/2017/05/25/cut/"/>
    <id>http://blog.golearns.org/2017/05/25/cut/</id>
    <published>2017-05-25T15:20:06.000Z</published>
    <updated>2017-05-25T15:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下的cut使用"><a href="#Linux下的cut使用" class="headerlink" title="Linux下的cut使用"></a>Linux下的cut使用</h1><blockquote>
<p>cut是一个选取命令，通过将一段数据分析，取出想要的。选取数据一般通过行的方式</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-b</td>
<td>以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非指定了-n标志</td>
</tr>
<tr>
<td style="text-align:center">-c</td>
<td>以字符为单位进行分割</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td>自定义分隔符，默认为制表符</td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td>与-d一起使用，指定显示哪个区域</td>
</tr>
</tbody>
</table>
<h3 id="b参数"><a href="#b参数" class="headerlink" title="-b参数"></a>-b参数</h3><ul>
<li><p>以字节为单位分割</p>
<pre><code># tail显示passwd文件最后5行，cut以字节分割，获取1位置的字节
[root@m2 ~]# tail -n 5 passwd | cut -b 1
s
t
m
z
Z

# tail显示passwd文件最后5行，cut以字节分割，获取1-5位置的字节
[root@m2 ~]# tail -n 5 passwd | cut -b 1-5
sshd:
tcpdu
mysql
zhang
Zhang

# tail显示passwd文件最后5行，cut以字节分割，获取1-5和8-10位置的字节
[root@m2 ~]# tail -n 5 passwd | cut -b 1-5,8-10
sshd:74:
tcpdu:x:
mysql:27
zhangn:x
Zhangn:x
</code></pre></li>
</ul>
<h3 id="c参数"><a href="#c参数" class="headerlink" title="-c参数"></a>-c参数</h3><ul>
<li><p>以字符为单位分割，在中文文件中提取</p>
<pre><code>[root@m2 ~]# cat c.txt 
你好地方司机浪费觉得算了发动机素

[root@m2 ~]# tail -n 5 c.txt | cut -c 1-5
你好地方司
</code></pre></li>
</ul>
<h3 id="d和-f参数结合使用自定义分隔符"><a href="#d和-f参数结合使用自定义分隔符" class="headerlink" title="-d和-f参数结合使用自定义分隔符"></a>-d和-f参数结合使用自定义分隔符</h3><ul>
<li><p>显示passwd文件最后5行，通过自定义分隔符:冒号分割，提取1和3位置的内容</p>
<pre><code>[root@m2 ~]# tail -n 5 passwd | cut -d : -f 1,3
sshd:74
tcpdump:72
mysql:27
zhangsan:500
Zhangsan:500
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux下的cut使用&quot;&gt;&lt;a href=&quot;#Linux下的cut使用&quot; class=&quot;headerlink&quot; title=&quot;Linux下的cut使用&quot;&gt;&lt;/a&gt;Linux下的cut使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;cut是一个选取命令，通过将一段数
    
    </summary>
    
      <category term="Linux" scheme="http://blog.golearns.org/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.golearns.org/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>awk</title>
    <link href="http://blog.golearns.org/2017/05/25/awk/"/>
    <id>http://blog.golearns.org/2017/05/25/awk/</id>
    <published>2017-05-25T15:19:04.000Z</published>
    <updated>2017-05-25T15:19:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下的awk使用"><a href="#Linux下的awk使用" class="headerlink" title="Linux下的awk使用"></a>Linux下的awk使用</h1><blockquote>
<p>awk分析文件数据，根据分隔符对一行一行的数据进行拆分，获取某一列
分隔符默认是空格，可以使用-F;以分号为分隔符,-F:以冒号为分隔符</p>
</blockquote>
<ul>
<li><p>获取当前主机指定网卡的IP地址</p>
<pre><code>[root@m2 ~]# ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 00:0C:29:C6:3D:D5  
inet addr:192.168.0.150  Bcast:192.168.0.255  Mask:255.255.255.0
inet6 addr: fe80::20c:29ff:fec6:3dd5/64 Scope:Link
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
RX packets:11240 errors:0 dropped:0 overruns:0 frame:0
TX packets:2747 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000 
RX bytes:1389465 (1.3 MiB)  TX bytes:207415 (202.5 KiB)

[root@m2 ~]# ifconfig eth0 | grep &quot;inet addr:&quot; | awk &apos;{print $2}&apos; | awk -F : &apos;{print $2}&apos;
192.168.0.150
</code></pre></li>
<li><p>获取/etc/passwd中用户UID大于500的用户名和用户登陆的shell</p>
<pre><code>[root@m2 ~]# cat passwd | awk -F  : &apos;$3&gt;500{print $1,$7}&apos;
nfsnobody /sbin/nologin

# 使用\t制表符隔开
[root@m2 ~]# cat passwd | awk -F : &apos;$3&gt;500{print $1 &quot;\t&quot; $7}&apos;
nfsnobody    /sbin/nologin
</code></pre></li>
<li><p>获取/etc/passwd中用户UID&gt;=500并且登陆shell为/bin/bash的用户名和登陆shell</p>
<pre><code>[root@m2 ~]# cat passwd | awk -F : &apos;$3&gt;=500 &amp;&amp; $7==&quot;/bin/bash&quot;{print $1,$7}&apos;
zhangsan /bin/bash
Zhangsan /bin/bash

# 显示行号
[root@m2 ~]# nl passwd | awk -F : &apos;$3&gt;=500 &amp;&amp; $7==&quot;/bin/bash&quot;{print $1,$7}&apos;
35    zhangsan /bin/bash
36    Zhangsan /bin/bash
</code></pre></li>
<li><p>使用BEGIN和END，在筛选前和筛选后分别输出一些内容</p>
<pre><code>[root@m2 ~]# cat passwd | awk -F : &apos;BEGIN {print &quot;用户名 \t 使用的shell&quot;} $3&gt;500 {print $1 &quot;\t&quot; $7} END {print &quot;end&quot;}&apos;
用户名      使用的shell
nfsnobody    /sbin/nologin
end
</code></pre></li>
<li><p>获取指定目录下所有文件总大小,定义size变量用来统计</p>
<pre><code>[root@m2 ~]# ls -l /etc/ | awk &apos;BEGIN {size=0;} {size+=$5;} END {print &quot;总大小：&quot;,size/1024/1024,&quot;Mb&quot;}&apos;
总大小： 1.84909 Mb
</code></pre></li>
<li><p>统计当前电脑内存使用百分比</p>
<pre><code>[root@m2 sh]# vim example19.sh
#!/bin/bash
echo &apos;显示内存使用百分比：&apos;
use=`free -m | grep &apos;cache:&apos; | awk &apos;{print $3}&apos;`
total=`free -m | grep &apos;Mem:&apos; | awk &apos;{print $2}&apos;`
result=`expr $use \* 100 / $total`
echo &quot;使用百分比为：$result%&quot;

[root@m2 sh]# chmod +x example19.sh
[root@m2 sh]# ./example19.sh 
显示内存使用百分比：
使用百分比为：20%
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux下的awk使用&quot;&gt;&lt;a href=&quot;#Linux下的awk使用&quot; class=&quot;headerlink&quot; title=&quot;Linux下的awk使用&quot;&gt;&lt;/a&gt;Linux下的awk使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;awk分析文件数据，根据分隔符对一
    
    </summary>
    
      <category term="Linux" scheme="http://blog.golearns.org/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.golearns.org/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>sed</title>
    <link href="http://blog.golearns.org/2017/05/25/sed/"/>
    <id>http://blog.golearns.org/2017/05/25/sed/</id>
    <published>2017-05-25T15:15:24.000Z</published>
    <updated>2017-05-25T15:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux下的sed使用"><a href="#Linux下的sed使用" class="headerlink" title="Linux下的sed使用"></a>Linux下的sed使用</h1><blockquote>
<p>流编辑器，sed编辑器是一行一行处理文件内容。正在处理的内容放入缓冲区内
处理完成后根据选项进行输出或文件修改</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-n</td>
<td>抑制自动(默认)输出，读取下一个输入行</td>
</tr>
<tr>
<td style="text-align:center">-i</td>
<td>编辑文件内容</td>
</tr>
<tr>
<td style="text-align:center">-e</td>
<td>执行多次</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td>在匹配后追加</td>
</tr>
<tr>
<td style="text-align:center">i</td>
<td>在匹配后插入</td>
</tr>
<tr>
<td style="text-align:center">p</td>
<td>打印</td>
</tr>
<tr>
<td style="text-align:center">d</td>
<td>删除</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td>另存</td>
</tr>
<tr>
<td style="text-align:center">c</td>
<td>替换</td>
</tr>
<tr>
<td style="text-align:center">s</td>
<td>查找</td>
</tr>
<tr>
<td style="text-align:center">h/H</td>
<td>复制copy</td>
</tr>
<tr>
<td style="text-align:center">g/G</td>
<td>粘贴</td>
</tr>
</tbody>
</table>
<h3 id="s命令"><a href="#s命令" class="headerlink" title="s命令"></a>s命令</h3><ul>
<li><p>查找替换</p>
<pre><code># 将root替换为boot
[root@m2 ~]# sed &apos;s/root/boot/&apos; passwd | grep boot --color
boot:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/boot:/sbin/nologin

# 将所有root替换为boot,g表示替换所有
[root@m2 ~]# sed &apos;s/root/boot/g&apos; passwd | grep boot --color
boot:x:0:0:boot:/boot:/bin/bash
operator:x:11:0:operator:/boot:/sbin/nologin

# 给查找的目标内容添加括号,&amp;表示查找的内容
[root@m2 ~]# sed &apos;s/root/(&amp;)/&apos; passwd | grep &apos;(root)&apos; --color
(root):x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/(root):/sbin/nologin

# 给所有行添加注释
[root@m2 ~]# sed &apos;s/^[a-zA-Z]/#&amp;/&apos; passwd 
#root:x:0:0:root:/root:/bin/bash
#bin:x:1:1:bin:/bin:/sbin/nologin

# 多次替换,-e
[root@m2 ~]# sed -e &apos;s/root/boot/&apos; -e &apos;s/message/messages/&apos; passwd | grep &quot;\&lt;boot\|messages\&gt;&quot; --color
boot:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/boot:/sbin/nologin
dbus:x:81:81:System messages bus:/:/sbin/nologin

# 替换指定行
[root@m2 ~]# sed &apos;1,5s/root/boot/&apos; passwd | grep boot --color -n
1:boot:x:0:0:root:/root:/bin/bash
</code></pre></li>
</ul>
<h3 id="n-p命令"><a href="#n-p命令" class="headerlink" title="n,p命令"></a>n,p命令</h3><ul>
<li><p>显示指定行</p>
<pre><code># 显示第5行
[root@m2 ~]# sed -n &apos;5p&apos; passwd 
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

# 显示前五行的内容
[root@m2 ~]# sed -n &apos;1,5p&apos; passwd 
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

# 显示除前五行之外的其他行,使用!号
[root@m2 ~]# sed -n &apos;1,5!p&apos; passwd 
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin

# 显示第五行和第五行之后的三行
[root@m2 ~]# sed -n &apos;5,+3p&apos; passwd 
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt

# 显示文件总行数
[root@m2 ~]# sed -n &apos;$=&apos; passwd 
36
</code></pre></li>
</ul>
<h3 id="i-a命令"><a href="#i-a命令" class="headerlink" title="i,a命令"></a>i,a命令</h3><ul>
<li><p>在行前和行尾插入</p>
<pre><code># 在第一行前面插入一行
[root@m2 ~]# sed &apos;1ihello world one line&apos; passwd 
hello world one line
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin

# 在最后一行后面插入一行
[root@m2 ~]# sed &apos;$a插入最后一行&apos; passwd
Zhangsan:x:500:500::/home/zhangsan:/bin/bash
插入最后一行

# 在第一行后面插入多行,使用反斜杠(\)进行断行操作
[root@m2 ~]# sed &apos;1ahello \
&gt; world&apos; passwd
root:x:0:0:root:/root:/bin/bash
hello 
world
bin:x:1:1:bin:/bin:/sbin/nologin
</code></pre></li>
</ul>
<h3 id="c命令"><a href="#c命令" class="headerlink" title="c命令"></a>c命令</h3><ul>
<li><p>内容替换</p>
<pre><code># 将第二行内容全部替换为Hello world
[root@m2 ~]# sed &apos;2cHello world&apos; passwd 
root:x:0:0:root:/root:/bin/bash
Hello world
daemon:x:2:2:daemon:/sbin:/sbin/nologin
</code></pre></li>
</ul>
<h3 id="nl命令"><a href="#nl命令" class="headerlink" title="nl命令"></a>nl命令</h3><ul>
<li><p>显示文件行号</p>
<pre><code># 显示第三行-第五行内容，并显示行号
[root@m2 ~]# nl passwd | sed -n &apos;3,5p&apos;
 3    daemon:x:2:2:daemon:/sbin:/sbin/nologin
 4    adm:x:3:4:adm:/var/adm:/sbin/nologin
 5    lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin

# 在第二行后插入多行，并显示行号
[root@m2 ~]# nl passwd | sed &apos;2a hahhaha \
&gt; hehehehhe &apos;
     1    root:x:0:0:root:/root:/bin/bash
     2    bin:x:1:1:bin:/bin:/sbin/nologin
hahhaha 
hehehehhe 
     3    daemon:x:2:2:daemon:/sbin:/sbin/nologin
     4    adm:x:3:4:adm:/var/adm:/sbin/nologin

# 直接显示文件内容和行号
[root@m2 ~]# nl passwd 
 1    root:x:0:0:root:/root:/bin/bash
 2    bin:x:1:1:bin:/bin:/sbin/nologin
 3    daemon:x:2:2:daemon:/sbin:/sbin/nologin
 4    adm:x:3:4:adm:/var/adm:/sbin/nologin
</code></pre></li>
</ul>
<h3 id="i命令"><a href="#i命令" class="headerlink" title="-i命令"></a>-i命令</h3><ul>
<li><p>将修改的内容写入文件</p>
<pre><code># 将修改的内容写入文件
[root@m2 ~]# sed -i &apos;s/messagess/message/&apos; passwd
</code></pre></li>
</ul>
<h3 id="H-G命令"><a href="#H-G命令" class="headerlink" title="H,G命令"></a>H,G命令</h3><ul>
<li><p>复制粘贴</p>
<pre><code># 将1-4行的内容复制到第四行后面
[root@m2 ~]# nl passwd | sed &apos;1,4H;4G&apos;
 1    root:x:0:0:root:/root:/bin/bash
 2    bin:x:1:1:bin:/bin:/sbin/nologin
 3    daemon:x:2:2:daemon:/sbin:/sbin/nologin
 4    adm:x:3:4:adm:/var/adm:/sbin/nologin

 1    root:x:0:0:root:/root:/bin/bash
 2    bin:x:1:1:bin:/bin:/sbin/nologin
 3    daemon:x:2:2:daemon:/sbin:/sbin/nologin
 4    adm:x:3:4:adm:/var/adm:/sbin/nologin
 5    lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
</code></pre></li>
</ul>
<h3 id="d命令"><a href="#d命令" class="headerlink" title="d命令"></a>d命令</h3><ul>
<li><p>删除</p>
<pre><code># 将开头内容为Zhangsan的行删除
[root@m2 ~]# sed &apos;/^Zhangsan/d&apos; passwd &gt; newpasswd
[root@m2 ~]# vim newpasswd
</code></pre></li>
</ul>
<h3 id="w命令"><a href="#w命令" class="headerlink" title="w命令"></a>w命令</h3><ul>
<li><p>写入,过滤</p>
<pre><code># 过滤含有root内容的行，写入到新文件newpasswd中
# 可以用来过滤文件内容，并写入到新文件
[root@m2 ~]# sed &apos;/root/w newpasswd&apos; passwd
[root@m2 ~]# cat newpasswd 
root:x:0:0:root:/root:/bin/bash
operator:x:11:0:operator:/root:/sbin/nologin
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux下的sed使用&quot;&gt;&lt;a href=&quot;#Linux下的sed使用&quot; class=&quot;headerlink&quot; title=&quot;Linux下的sed使用&quot;&gt;&lt;/a&gt;Linux下的sed使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;流编辑器，sed编辑器是一行一行处
    
    </summary>
    
      <category term="Linux" scheme="http://blog.golearns.org/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.golearns.org/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Exchanger</title>
    <link href="http://blog.golearns.org/2017/05/21/Exchanger/"/>
    <id>http://blog.golearns.org/2017/05/21/Exchanger/</id>
    <published>2017-05-21T08:44:47.000Z</published>
    <updated>2017-05-21T08:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发编程类Exchanger"><a href="#Java并发编程类Exchanger" class="headerlink" title="Java并发编程类Exchanger"></a>Java并发编程类Exchanger</h1><pre><code>/**
 * Exchanger用于两个线程之间的数据交换
 * 线程会阻塞在Exchanger的exchange方法上
 * 直到另外一个线程也到达同一个Exchanger的exchange方法上
 * 二者进行交换
 * 无论谁先到达Exchanger的exchange方法，都会等待另外一个线程也到达，然后交换数据
 */
public class ExchangerDemo1 {

    public static void main(String[] args) {
        final Exchanger&lt;List&lt;Integer&gt;&gt; exchanger = new Exchanger&lt;&gt;();

        Runnable runnable1 = () -&gt; {
            List&lt;Integer&gt; lists = new ArrayList&lt;&gt;();
            lists.add(1);
            lists.add(2);

            try {
                lists = exchanger.exchange(lists);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println(&quot;aa[1, 2] &quot; + lists);
        };

        Runnable runnable2 = () -&gt; {
            List&lt;Integer&gt; lists = new ArrayList&lt;&gt;();
            lists.add(3);
            lists.add(4);

            try {
                lists = exchanger.exchange(lists);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println(&quot;bb[3, 4] &quot; + lists);
        };

        ExecutorService service = Executors.newFixedThreadPool(3);
        service.execute(runnable1);
        service.execute(runnable2);
        service.shutdown();
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java并发编程类Exchanger&quot;&gt;&lt;a href=&quot;#Java并发编程类Exchanger&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程类Exchanger&quot;&gt;&lt;/a&gt;Java并发编程类Exchanger&lt;/h1&gt;&lt;pre&gt;&lt;cod
    
    </summary>
    
      <category term="并发" scheme="http://blog.golearns.org/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.golearns.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Semaphore</title>
    <link href="http://blog.golearns.org/2017/05/21/Semaphore/"/>
    <id>http://blog.golearns.org/2017/05/21/Semaphore/</id>
    <published>2017-05-21T08:03:20.000Z</published>
    <updated>2017-05-21T08:56:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发编程类Semaphore"><a href="#Java并发编程类Semaphore" class="headerlink" title="Java并发编程类Semaphore"></a>Java并发编程类Semaphore</h1><pre><code>/**
 * 限制可以访问资源的线程数
 */
public class SemaphoreDemo1 {

    public static void main(String[] args) {
        final Semaphore semaphore = new Semaphore(3);

        Runnable runnable = () -&gt; {
            System.out.println(Thread.currentThread().getName() + &quot; 可用的Semaphore permits: &quot; + semaphore.availablePermits());
            try {

                // 获取Semaphore permits
                semaphore.acquire();

                try {
                    for (int i = 0; i &lt; 5; i++) {
                        System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i + &quot; : 可用的Semaphore permits: &quot; + semaphore.availablePermits());
                        Thread.sleep(1000);
                    }
                } finally {
                    System.out.println(Thread.currentThread().getName() + &quot;释放锁&quot;);
                    // 释放锁
                    semaphore.release();
                    System.out.println(Thread.currentThread().getName() + &quot;可用的Semaphore permits: &quot; + semaphore.availablePermits());
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };

        ExecutorService service = Executors.newFixedThreadPool(3);
        for (int i = 0; i &lt; 5; i++) {
            service.execute(runnable);
        }
        service.shutdown();
    }
}

/**
 * 限制可以访问资源的线程数，一次只有一个线程可以访问资源
 */
public class SemaphoreDemo1 {

    public static void main(String[] args) {
        // 互斥锁，Semaphore为1
        final Semaphore semaphore = new Semaphore(1);

        Runnable runnable = () -&gt; {
            System.out.println(Thread.currentThread().getName() + &quot; 可用的Semaphore permits: &quot; + semaphore.availablePermits());
            try {

                // 获取Semaphore permits
                semaphore.acquire();

                try {
                    for (int i = 0; i &lt; 5; i++) {
                        System.out.println(Thread.currentThread().getName() + &quot; : &quot; + i + &quot; : 可用的Semaphore permits: &quot; + semaphore.availablePermits());
                        Thread.sleep(1000);
                    }
                } finally {
                    System.out.println(Thread.currentThread().getName() + &quot;释放锁&quot;);
                    // 释放锁
                    semaphore.release();
                    System.out.println(Thread.currentThread().getName() + &quot;可用的Semaphore permits: &quot; + semaphore.availablePermits());
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        };

        ExecutorService service = Executors.newFixedThreadPool(3);
        for (int i = 0; i &lt; 5; i++) {
            service.execute(runnable);
        }
        service.shutdown();
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java并发编程类Semaphore&quot;&gt;&lt;a href=&quot;#Java并发编程类Semaphore&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程类Semaphore&quot;&gt;&lt;/a&gt;Java并发编程类Semaphore&lt;/h1&gt;&lt;pre&gt;&lt;cod
    
    </summary>
    
      <category term="并发" scheme="http://blog.golearns.org/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.golearns.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>CyclicBarrier</title>
    <link href="http://blog.golearns.org/2017/05/21/CyclicBarrier/"/>
    <id>http://blog.golearns.org/2017/05/21/CyclicBarrier/</id>
    <published>2017-05-21T07:53:54.000Z</published>
    <updated>2017-05-21T08:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发编程类CyclicBarrier"><a href="#Java并发编程类CyclicBarrier" class="headerlink" title="Java并发编程类CyclicBarrier"></a>Java并发编程类CyclicBarrier</h1><pre><code>/**
 * CyclicBarrier协同多个线程
 * 用于同步所有调用await方法的线程，并且等所有线程都到了await方法时
 * 这些线程才一起返回继续各自的工作
 */
public class CyclicBarrierDemo1 {

    public static void main(String[] args) {
        int count = 10;
        final CyclicBarrier barrier = new CyclicBarrier(count + 1);
        Runnable rannable = () -&gt; {
            System.out.println(Thread.currentThread().getName() + &quot; : hahhahaha&quot;);
            try {
                barrier.await();
            } catch (InterruptedException | BrokenBarrierException e) {
                e.printStackTrace();
            }
        };

        ExecutorService service = Executors.newFixedThreadPool(count);
        for (int i = 0; i &lt; count; i++) {
            service.execute(rannable);
        }

        try {
            barrier.await();
        } catch (InterruptedException | BrokenBarrierException e) {
            e.printStackTrace();
        }

        service.shutdown();
        System.out.println(&quot;执行完毕&quot;);
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java并发编程类CyclicBarrier&quot;&gt;&lt;a href=&quot;#Java并发编程类CyclicBarrier&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程类CyclicBarrier&quot;&gt;&lt;/a&gt;Java并发编程类CyclicBarri
    
    </summary>
    
      <category term="并发" scheme="http://blog.golearns.org/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.golearns.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Atomics</title>
    <link href="http://blog.golearns.org/2017/05/21/Atomics/"/>
    <id>http://blog.golearns.org/2017/05/21/Atomics/</id>
    <published>2017-05-21T07:39:22.000Z</published>
    <updated>2017-05-21T08:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发编程类Atomics"><a href="#Java并发编程类Atomics" class="headerlink" title="Java并发编程类Atomics"></a>Java并发编程类Atomics</h1><pre><code>// 使用synchronized
public class Counter1 {

    private int counter = 0;
    public int increase() {
        synchronized (this) {
            counter += 1;
            return counter;
        }
    }

    public int decrease() {
        synchronized (this) {
            counter -= 1;
            return counter;
        }
    }

    public static void main(String[] args) {
        Counter1 c1 = new Counter1();
        ExecutorService service = Executors.newFixedThreadPool(5);
        for (int i = 0; i &lt; 100; i++) {
            service.execute(() -&gt; {
                System.out.println(Thread.currentThread().getName() + &quot; : &quot; + c1.increase());
            });
        }
        service.shutdown();
    }
}

// 使用AtomicInteger
public class Counter2 {

    private AtomicInteger counter = new AtomicInteger(0);

    public int increase() {
        return counter.incrementAndGet();
    }

    public int descrease() {
        return counter.decrementAndGet();
    }

    public static void main(String[] args) {
        Counter2 c2 = new Counter2();
        ExecutorService service = Executors.newFixedThreadPool(5);
        for (int i = 0; i &lt; 100; i++) {
            service.execute(() -&gt; {
                System.out.println(Thread.currentThread().getName() + &quot; : &quot; + c2.increase());
            });
        }
        service.shutdown();
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java并发编程类Atomics&quot;&gt;&lt;a href=&quot;#Java并发编程类Atomics&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程类Atomics&quot;&gt;&lt;/a&gt;Java并发编程类Atomics&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 使用s
    
    </summary>
    
      <category term="并发" scheme="http://blog.golearns.org/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.golearns.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock</title>
    <link href="http://blog.golearns.org/2017/05/21/ReentrantLock/"/>
    <id>http://blog.golearns.org/2017/05/21/ReentrantLock/</id>
    <published>2017-05-21T07:35:56.000Z</published>
    <updated>2017-05-21T08:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发编程类ReentrantLock"><a href="#Java并发编程类ReentrantLock" class="headerlink" title="Java并发编程类ReentrantLock"></a>Java并发编程类ReentrantLock</h1><pre><code>public class ReentrantLockDemo1 {

    private final ReentrantLock lock = new ReentrantLock();
    private final Map&lt;String, String&gt; maps = new HashMap&lt;&gt;();

    public void add(String key, String value) {
        final ReentrantLock lock = this.lock;
        lock.lock();

        try {
            if (null == maps.get(key)) {
                maps.put(key, value);
            }
        } finally {
            lock.unlock();
        }
    }

    public void remove(String key) {
        final ReentrantLock lock = this.lock;
        lock.lock();

        try {
            if (null != maps.get(key)) {
                maps.remove(key);
            }
        } finally {
            lock.unlock();
        }
    }

    public void getMaps() {
        maps.forEach((k, v) -&gt; {
            System.out.println(&quot;key: &quot; + k + &quot;, value: &quot; + v);
        });
    }

    public static void main(String[] args) throws Exception {
        ReentrantLockDemo1 r1 = new ReentrantLockDemo1();
        ExecutorService service = Executors.newFixedThreadPool(5);
        final List&lt;Future&lt;?&gt;&gt; lists = new ArrayList&lt;&gt;();
        for (int i = 0; i &lt; 20; i++) {
            final Integer[] is = new Integer[1];
            is[0] = i;
            Future&lt;?&gt; submit = service.submit(() -&gt; {
                r1.add(&quot;key &quot; + is[0], &quot;value &quot; + is[0]);
            });
            lists.add(submit);
        }
        service.shutdown();

        for (Future&lt;?&gt; future : lists) {
            while (!future.isDone()) {}

            future.get();
        }

        r1.getMaps();
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java并发编程类ReentrantLock&quot;&gt;&lt;a href=&quot;#Java并发编程类ReentrantLock&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程类ReentrantLock&quot;&gt;&lt;/a&gt;Java并发编程类ReentrantLo
    
    </summary>
    
      <category term="并发" scheme="http://blog.golearns.org/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.golearns.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>CountDownLatch</title>
    <link href="http://blog.golearns.org/2017/05/21/CountDownLatch/"/>
    <id>http://blog.golearns.org/2017/05/21/CountDownLatch/</id>
    <published>2017-05-21T07:32:28.000Z</published>
    <updated>2017-05-21T08:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java并发编程类CountDownLatch"><a href="#Java并发编程类CountDownLatch" class="headerlink" title="Java并发编程类CountDownLatch"></a>Java并发编程类CountDownLatch</h1><pre><code>public class CountDownLatchDemo1 {

    public static void main(String[] args) {
        int count = 10;
        final CountDownLatch downLatch = new CountDownLatch(count);
        Runnable rannable = () -&gt; {
            System.out.println(Thread.currentThread().getName() + &quot; : hahhahaha&quot;);
            downLatch.countDown();
        };

        ExecutorService service = Executors.newFixedThreadPool(2);
        for (int i = 0; i &lt; count; i++) {
            service.execute(rannable);
        }
        service.shutdown();

        // 当多个线程都达到了预期状态或完成预期工作时触发事件，其他线程可以等待这个事件来触发后续的工作
        try {
            downLatch.await();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // 当上面当所有线程都完成了downLatch.countDown调用后，会从downLatch.await返回后执行以下操作
        System.out.println(&quot;执行完毕&quot;);
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java并发编程类CountDownLatch&quot;&gt;&lt;a href=&quot;#Java并发编程类CountDownLatch&quot; class=&quot;headerlink&quot; title=&quot;Java并发编程类CountDownLatch&quot;&gt;&lt;/a&gt;Java并发编程类CountDow
    
    </summary>
    
      <category term="并发" scheme="http://blog.golearns.org/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.golearns.org/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>大型网站核心架构要素</title>
    <link href="http://blog.golearns.org/2017/05/11/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E8%A6%81%E7%B4%A0/"/>
    <id>http://blog.golearns.org/2017/05/11/大型网站核心架构要素/</id>
    <published>2017-05-11T15:15:54.000Z</published>
    <updated>2017-05-11T15:45:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大型网站核心架构要素"><a href="#大型网站核心架构要素" class="headerlink" title="大型网站核心架构要素"></a>大型网站核心架构要素</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul>
<li>从用户浏览器到数据库，影响用户请求的所有环节都可以进行性能优化</li>
<li>在浏览器端，可以通过浏览器缓存、使用页面压缩、合理布局页面、减少cookie传输等手段改善性能</li>
<li>还可以使用CDN，将网站静态内容分发至离用户最近的网络服务商机房，使用户通过最短访问路径获取数据。可以在网站机房部署反向代理服务器，缓存热点文件，加快请求响应速度，减轻应用服务器负载压力</li>
<li>在应用服务器端，可以使用服务器本地缓存和分布式缓存，通过缓存在内存中的热点数据处理用户请求，加快请求处理过程，减轻数据库负载压力</li>
<li>也可以通过异步操作将用户请求发送至消息队列等待后续任务处理，而当前请求直接返回响应给用户</li>
<li>在网站有很多用户高并发请求的情况下，可以将多台应用服务器组成一个集群共同对外服务，提高整体处理能力，改善性能</li>
<li>在代码层面，也可以通过使用多线程、改善内存管理等手段优化性能</li>
<li>在数据库服务器端，索引、缓存、SQL优化等性能优化手段都已经比较成熟。而NoSQL数据库通过优化数据模型、存储结构、伸缩特性等手段在性能方面的优势也日趋明显</li>
<li>衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等，通过测试这些指标以确定系统设计是否达到目标。这些指标也是网站监控的重要参数，通过监控这些指标可以分析系统瓶颈，预测网站容量，并对异常指标进行报警，保障系统可用性</li>
</ul>
<a id="more"></a>
<h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><ul>
<li>网站高可用的主要手段是冗余，应用部署在多台服务器上同时提供访问，数据存储在多台服务器上互相备份，任何一台服务器宕机都不会影响应用的整体可用，也不会导致数据丢失</li>
<li>对于应用服务器而言，多台应用服务器通过负载均衡设备组成一个集群共同对外提供服务，任何一台服务器宕机，只需把请求切换到其它服务器就可实现应用到高可用，但是一个前提条件是应用服务器上不能保存请求的会话信息。否则服务器宕机，会话丢失，即使将用户请求转发到其它服务器上也无法完成业务处理</li>
<li>对于存储服务器，由于存储着数据，需要对数据进行实时备份，当服务器宕机时需要将数据访问转移到可用的服务器上，并进行数据恢复以保证继续游服务器宕机的时候数据依然可用</li>
<li>除了运行环境，网站的高可用还需要软件开发过程的质量保证。通过预发布验证、自动化测试、自动化发布、灰度发布等手段，减少将故障引入线上环境等可能，避免故障范围扩大</li>
<li>衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或者多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用</li>
</ul>
<h2 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h2><ul>
<li>衡量架构伸缩性的主要标准就是是否可以用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来服务器无差别的服务。集群中可容纳的总的服务器数量是否有限制</li>
<li>对于应用服务器集群，只要服务器上不保存数据，所有服务器都是对等的，通过使用合适的负载均衡设备就可以向集群中不断加入服务器</li>
<li>对于缓存服务器集群，加入新的服务器可能会导致缓存路由失效，进而导致集群中大部分缓存都无法访问。虽然缓存的数据可以通过数据库重新加载，但是如果应用已经严重依赖缓存，可能会导致整个网站崩溃。需要改进缓存路由算法保证缓存数据的可访问性</li>
<li>关系数据库虽然支持数据复制，主从热备等机制，但是很难做到大规模集群的可伸缩性，因此关系数据库的集群伸缩性方案必须在数据库之外实现，通过路由分区等手段将部署有多个数据库的服务器组成一个集群</li>
<li>至于大部分NoSQL数据库产品，由于其先天就是为海量数据而生，因此其对伸缩性的支持通常都非常好，可以做到在较少运维参与的情况下实现集群规模的线性伸缩</li>
</ul>
<h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><ul>
<li>网站可扩展架构的主要手段是事件驱动架构和分布式服务</li>
<li>事件驱动架构在网站通常利用消息队列实现，将用户请求和其它业务事件构造成消息发布到消息队列，消息的处理者作为消息者从消息队列中获取消息进行处理。通过这种方式将消息产生和消息处理分离开来，可以透明地增加新的消息生产者任务或者心的消息消费者任务</li>
<li>分布式服务是将业务和可复用服务分离开来，通过分布式服务框架调用。新增产品可以通过调用可复用的服务实现自身的业务逻辑，而对现有产品没有任何影响。可复用服务升级变更的时候，也可以通过提供多版本服务对应用实现透明升级，不需要强制应用同步变更。</li>
</ul>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><ul>
<li>网站的安全架构就是保护网站不受恶意访问和攻击，保护网站的重要数据不被窃取</li>
<li>衡量网站安全架构的标准就是针对现存和潜在的各种攻击与窃密手段，是否有可靠的应对策略</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;大型网站核心架构要素&quot;&gt;&lt;a href=&quot;#大型网站核心架构要素&quot; class=&quot;headerlink&quot; title=&quot;大型网站核心架构要素&quot;&gt;&lt;/a&gt;大型网站核心架构要素&lt;/h1&gt;&lt;h2 id=&quot;性能&quot;&gt;&lt;a href=&quot;#性能&quot; class=&quot;headerlink&quot; title=&quot;性能&quot;&gt;&lt;/a&gt;性能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从用户浏览器到数据库，影响用户请求的所有环节都可以进行性能优化&lt;/li&gt;
&lt;li&gt;在浏览器端，可以通过浏览器缓存、使用页面压缩、合理布局页面、减少cookie传输等手段改善性能&lt;/li&gt;
&lt;li&gt;还可以使用CDN，将网站静态内容分发至离用户最近的网络服务商机房，使用户通过最短访问路径获取数据。可以在网站机房部署反向代理服务器，缓存热点文件，加快请求响应速度，减轻应用服务器负载压力&lt;/li&gt;
&lt;li&gt;在应用服务器端，可以使用服务器本地缓存和分布式缓存，通过缓存在内存中的热点数据处理用户请求，加快请求处理过程，减轻数据库负载压力&lt;/li&gt;
&lt;li&gt;也可以通过异步操作将用户请求发送至消息队列等待后续任务处理，而当前请求直接返回响应给用户&lt;/li&gt;
&lt;li&gt;在网站有很多用户高并发请求的情况下，可以将多台应用服务器组成一个集群共同对外服务，提高整体处理能力，改善性能&lt;/li&gt;
&lt;li&gt;在代码层面，也可以通过使用多线程、改善内存管理等手段优化性能&lt;/li&gt;
&lt;li&gt;在数据库服务器端，索引、缓存、SQL优化等性能优化手段都已经比较成熟。而NoSQL数据库通过优化数据模型、存储结构、伸缩特性等手段在性能方面的优势也日趋明显&lt;/li&gt;
&lt;li&gt;衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等，通过测试这些指标以确定系统设计是否达到目标。这些指标也是网站监控的重要参数，通过监控这些指标可以分析系统瓶颈，预测网站容量，并对异常指标进行报警，保障系统可用性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="架构" scheme="http://blog.golearns.org/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="http://blog.golearns.org/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>大型网站架构模式</title>
    <link href="http://blog.golearns.org/2017/05/11/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.golearns.org/2017/05/11/大型网站架构模式/</id>
    <published>2017-05-11T14:18:57.000Z</published>
    <updated>2017-05-11T15:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大型网站架构模式"><a href="#大型网站架构模式" class="headerlink" title="大型网站架构模式"></a>大型网站架构模式</h1><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><ul>
<li>分层是：将系统在横向维度上切分成几个部分，每个部分负责一部分相对比较单一的职责，然后通过上层对下层的依赖和调用组成一个完整的系统</li>
<li>在大型网站分层架构中，将网站软件系统分为应用层、服务层和数据层</li>
</ul>
<table>
<thead>
<tr>
<th>#</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>应用层</td>
<td style="text-align:center">负责具体业务和试图展示，如网站首页及搜索输入和结果展示</td>
</tr>
<tr>
<td>服务层</td>
<td style="text-align:center">为应用层提供服务支持，如用户管理服务，购物车服务等</td>
</tr>
<tr>
<td>数据层</td>
<td style="text-align:center">提供数据存储访问服务，如数据库、缓存、文件、搜索引擎等</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><ul>
<li>分割是：在纵向方面对软件进行切分</li>
<li>网站越大，功能越复杂，服务和数据处理的种类也越多，将这些不同的功能和服务分割开来，包装成高内聚低耦合的模块单元，一方面有助于软件的开发和维护，另一方面便于不同模块的分布式部署，提高网站的并发处理能力和功能扩展能力</li>
</ul>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><ul>
<li>对于大型网站，分层和分割的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同的服务器上，通过远程调用协同工作。分布式意味着可以使用更多的计算机完成相同的功能，计算机越多，CPU、内存、存储资源也就越多，能够处理的并发访问和数据量就越大，进而能够为更多的用户提供服务</li>
<li>常用的分布式：<ul>
<li><strong>分布式应用和服务</strong>：将分层和分割后的应用和服务模块分布式部署，除了可以改善网站性能和开发性、加快开发和发布速度、减少数据库连接资源消耗快，还可以使不同应用复用共同的服务，便于业务功能扩展</li>
<li><strong>分布式静态资源</strong>：网站的静态资源如JS，CSS，Logo图片等资源独立分布式部署，并采用独立的域名，即<strong>动静分离</strong></li>
<li><strong>分布式数据和存储</strong>：大型网站需要处理以P为单位的海量数据，单台计算机无法提供如此大的存储空间，这些数据需要分布式存储。除了对传统的关系数据库进行分布式部署外，各种NoSQL产品几乎都是分布式的</li>
<li><strong>分布式计算</strong>：严格来说，应用、服务、实时数据处理都是计算，网站除了要处理这些在线业务，还有很大一部分用户没有直观感受的后台业务要处理，包括搜索引擎等索引构建、数据仓库等数据分析统计等。目前网站普遍使用Hadoop及其MapReduce分布式计算框架进行此类批处理计算，其特点是移动计算而不是移动数据，将计算程序分发到数据所在到位置以加速计算和分布式计算</li>
</ul>
</li>
<li>还有可以支持网站线上服务器配置实时更新到分布式配置， 分布式环境下实现并发和协同的分布式锁，支持云存储的分布式文件系统等</li>
</ul>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><ul>
<li>使用分布式虽然已经将分层和分割后的模块独立部署，但是对于用户访问集中的模块，还需要独立部署的服务器集群化，即多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务</li>
<li>当有更多用户访问的时候，只需要向集群中加入新的机器即可。同时因为一个应用由多台服务器提供，当某台服务器发生故障时，<strong>负载均衡设备或者系统的失效转移机制会将请求转发到集群中其他服务器上，使服务器故障不影响用户使用</strong> </li>
</ul>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul>
<li>缓存是将数据放在距离计算最近的位置以加快处理速度</li>
<li>缓存设计：<ul>
<li><strong>CDN</strong>：即内容分发网络，部署在距离终端用户最近的网络提供商，用户的网络请求总是先到达他的网络服务商那里，在这里缓存网站的静态资源(较少变化的数据)，可以就近以最快速度返回给用户</li>
<li><strong>反向代理</strong>：反向代理属于网站前端架构的一部分，部署在网站的前端，当用户请求到达网站的数据中心时，最先访问的就是反向代理服务器，这里缓存网站的静态资源，无需将请求继续转发给应用服务器就能返回给用户</li>
<li><strong>本地缓存</strong>：在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而无须访问数据库</li>
<li><strong>分布式缓存</strong>：将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据</li>
</ul>
</li>
<li>使用缓存有两个前提条件，一是数据访问热点不均衡，某些数据会被频繁访问，这些数据应该放在缓存中。二是数据在某段时间段内有效，不会很快过期，否则缓存的数据就会因为已经失效而产生脏读，影响结果的正确性</li>
</ul>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul>
<li>业务之间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方式异步执行进行协作</li>
<li>在单一服务器内部可通过多线程共享内存队列的方式实现异步，处在业务操作前面的线程将输出写入到队列，后面的线程从队列中读取数据进行处理，在分布式系统中，多个服务器集群通过分布式消息队列实现异步，分布式消息队列可以看作内存队列的分布式部署</li>
<li>异步架构是典型的生产者消费者模式，两者不存在直接调用，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站扩展新功能非常便利。除此之外，使用异步消息队列还有如下特性：<ul>
<li><strong>提高系统可用性</strong>：消费者服务器发生故障，数据会在消息队列服务器中存储堆积，生产者服务器可以继续处理业务请求，系统整体表现无故障。消费者服务器恢复正常后，继续处理消息队列中的数据</li>
<li><strong>加快网站响应速度</strong>：处在业务处理前端的生产者服务器在处理完业务请求后，将数据写入消息队列，不需要等待消费者服务器处理就可以返回，响应延迟减少</li>
<li><strong>消除并发访问高峰</strong>：用户访问网站是随机的，存在访问高峰和低谷，即使网站按照一般访问高峰进行规划和部署，也依然会出现突发事件。使用消息队列将突然增加的访问请求数据放入消息队列中，等待消费者服务器依次处理，就不会对整个网站负载造成太大压力</li>
</ul>
</li>
</ul>
<h2 id="冗余"><a href="#冗余" class="headerlink" title="冗余"></a>冗余</h2><ul>
<li>要想保证服务器宕机的情况下网站依然可以继续服务，不丢失数据，就需要一定程度的服务器冗余运行，数据冗余备份，这样当某台服务器宕机时，可以将其上的服务和数据访问转移到其它机器上</li>
<li>数据库出了定期备份，实现冷备份外，为了保证在线业务高可用，还需要对数据库进行主从分离，实时同步实现热备份</li>
</ul>
<h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><ul>
<li>通过减少人为干预，使发布<strong>过程自动化</strong>可有效减少故障。发布过车过包括诸多环节。<strong>自动化代码管理</strong>，代码版本控制、代码分支创建合并等过程自动化，开发工程师制药提交自己参与开发的产品编号，系统就会自动为其创建开发分支，后期会自动进行代码合并；<strong>自动化测试</strong>，代码开发完成，提交测试后，系统自动将代码部署到测试环境，启动自动化测试用例进行测试，向相关人员发送测试报告，向系统反馈测试结果；<strong>自动化安全检测</strong>，安全检测工具通过对代码进行静态安全扫描及部署到安全测试环境进行安全攻击测试，评估其安全性；最后进行<strong>自动化部署</strong>，将工程代码自动部署到线上生产环境 </li>
<li>此外，网站可以会遇到各种问题：服务器宕机、程序bug、存储空间不足、突然爆发的访问高峰。网站需要对线上生产环节进行<strong>自动化监控</strong>，对服务器进行心跳检测，并监控其各项性能指标和应用程序的关键数据指标。如果发现异常、超出预设的阀值，就进行<strong>自动化报警</strong>，向相关人员发送报警信息，警告故障可能会发生。在检测到故障发生后，系统会进行<strong>自动化失效转移</strong>，将失效的服务器从集群中隔离出去，不再处理系统中的应用请求。待故障消除后，系统进行<strong>自动化失效恢复</strong>，重新启动服务，同步数据保证数据的一致性。在网站遇到访问高峰，超出网站最大处理能力时，为了保证整个网站的安全可用，还会进行<strong>自动化降级</strong>，通过拒绝部分请求及关闭部分不重要的服务将系统负载降至一个安全的水平，必要时，还需要<strong>自动化分配资源</strong>，将空闲资源分配给总要的服务，扩大其部署规模</li>
</ul>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul>
<li>安全架构：通过<strong>密码</strong>和<strong>手机校验码</strong>进行身份认证；登录、交易等操作需要对网络通信进行<strong>加密</strong>，网站服务器上存储的敏感数据如用户信息等也进行加密处理；为了防止机器人程序滥用网络资源攻击网站，网站使用<strong>验证码</strong>进行识别；对于常见的用于<strong>攻击</strong>网站的XSS攻击、SQL注入，进行编码转换等相应处理；对于垃圾信息、敏感信息进行过滤；对交易转账等重要操作根据交易模式和交易信息进行风险控制</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;大型网站架构模式&quot;&gt;&lt;a href=&quot;#大型网站架构模式&quot; class=&quot;headerlink&quot; title=&quot;大型网站架构模式&quot;&gt;&lt;/a&gt;大型网站架构模式&lt;/h1&gt;&lt;h2 id=&quot;分层&quot;&gt;&lt;a href=&quot;#分层&quot; class=&quot;headerlink&quot; title=&quot;分层&quot;&gt;&lt;/a&gt;分层&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分层是：将系统在横向维度上切分成几个部分，每个部分负责一部分相对比较单一的职责，然后通过上层对下层的依赖和调用组成一个完整的系统&lt;/li&gt;
&lt;li&gt;在大型网站分层架构中，将网站软件系统分为应用层、服务层和数据层&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;应用层&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;负责具体业务和试图展示，如网站首页及搜索输入和结果展示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;服务层&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;为应用层提供服务支持，如用户管理服务，购物车服务等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据层&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;提供数据存储访问服务，如数据库、缓存、文件、搜索引擎等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="架构" scheme="http://blog.golearns.org/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="集群" scheme="http://blog.golearns.org/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="分布式" scheme="http://blog.golearns.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="读写分离" scheme="http://blog.golearns.org/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="CND" scheme="http://blog.golearns.org/tags/CND/"/>
    
      <category term="反向代理" scheme="http://blog.golearns.org/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>大型网站架构演化</title>
    <link href="http://blog.golearns.org/2017/05/11/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96/"/>
    <id>http://blog.golearns.org/2017/05/11/大型网站架构演化/</id>
    <published>2017-05-11T13:11:23.000Z</published>
    <updated>2017-05-11T15:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大型网站架构演化"><a href="#大型网站架构演化" class="headerlink" title="大型网站架构演化"></a>大型网站架构演化</h1><h2 id="初始阶段的网站架构"><a href="#初始阶段的网站架构" class="headerlink" title="初始阶段的网站架构"></a>初始阶段的网站架构</h2><ul>
<li>小型网站最开始没有多少人访问，只需要一台服务器就绰绰有余</li>
<li>应用程序、数据库、文件等所有的资源都放在一台服务器上</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server1.png" alt=""></p>
<a id="more"></a>
<h2 id="应用服务和数据服务分离"><a href="#应用服务和数据服务分离" class="headerlink" title="应用服务和数据服务分离"></a>应用服务和数据服务分离</h2><ul>
<li>随着网站业务发展，越来越多的用户访问导致性能越来越差，越来越多的数据导致存储空间不足。这时就需要应用和数据分离。</li>
<li>应用服务器、文件服务器和数据库服务器<ul>
<li>应用服务器：<strong>处理大量的业务逻辑，需要更快更强大的CPU</strong></li>
<li>文件服务器：<strong>存储大量用户上传的文件，需要更大的硬盘</strong></li>
<li>数据库服务器：<strong>快速磁盘检索和数据缓存，需要更快的硬盘和更大的内存</strong></li>
</ul>
</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server2.png" alt=""></p>
<h2 id="使用缓存改变网站性能"><a href="#使用缓存改变网站性能" class="headerlink" title="使用缓存改变网站性能"></a>使用缓存改变网站性能</h2><ul>
<li>网站访问特点：<strong>80%的业务访问集中在20%的数据上</strong></li>
<li>把集中访问的一小部分数据缓存在内存中就可以减少数据库的访问压力，提高整个网站的数据访问速度，改善数据库写入性能</li>
<li>网站缓存分为两种：缓存在应用服务器的<strong>本地缓存</strong>和缓存在专门<strong>分布式缓存服务器上的远程缓存</strong><ul>
<li>本地缓存：<strong>访问速度更快，但是受应用服务器内存限制，缓存数据量有限，而且会出现和应用服务器争用内存的情况</strong></li>
<li>远程缓存：<strong>可以使用集群的方式，部署大内存的服务器作为专门的缓存服务器，理论上做到不受内存容量限制的缓存服务</strong></li>
</ul>
</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server3.png" alt=""> </p>
<h2 id="使用应用服务器集群改善网站的并发处理能力"><a href="#使用应用服务器集群改善网站的并发处理能力" class="headerlink" title="使用应用服务器集群改善网站的并发处理能力"></a>使用应用服务器集群改善网站的并发处理能力</h2><ul>
<li>通过增加服务器分担原有服务器的访问及存储压力，从而实现系统的可伸缩性</li>
<li>通过负载均衡调度服务器，可将来自用户浏览器的访问请求转发到应用服务器集群中的任何一台服务器上，如果有个更多的用户，就在集群中加入更多的应用服务器，使应用服务器的负载压力不在成为整个网站的瓶颈</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server4.png" alt=""></p>
<h2 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h2><ul>
<li>网站使用缓存后，使绝大部分数据读操作访问都可以不通过数据库就能完成，但是仍有一部分读操作<strong>(缓存访问不命中、缓存过期)</strong>和全部的写操作需要访问数据库，在网站的用户达到一定规模后，数据库因为负载压力过高而成为网站的瓶颈</li>
<li>目前大部分主流数据库提供<strong>主从热备</strong>，通过配置两台数据库主从关系，可以将一台服务器数据库的数据更新同步到另外一台服务器上。网站利用数据库读写分离改善数据库的负载压力</li>
<li>应用服务器在写数据的时候，<strong>访问主数据库，主数据库通过主从复制机制将数据更新同步到从数据库，这样当应用服务器读数据的时候，就可以通过从数据库获取数据</strong></li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server5.png" alt=""></p>
<h2 id="使用反向代理和CND加速网站响应"><a href="#使用反向代理和CND加速网站响应" class="headerlink" title="使用反向代理和CND加速网站响应"></a>使用反向代理和CND加速网站响应</h2><ul>
<li>随着网站业务不断发展，用户规模越来愈大，由于中国复杂的网络环境，不同地区的用户访问网站时，速度差别较大。</li>
<li>网站加速手段有<strong>CDN</strong>和<strong>反向代理</strong></li>
<li>CDN和反向代理的基本原理都是缓存。<ul>
<li>CDN部署在网络提供山的机房，使用户在请求网站服务时，可以从距离自己最近的网络提供商机房获取数据</li>
<li>反向代理部署在网站的中心机房，当用户请求到达中心机房后，首先访问的服务器是反向代理服务器，如果反向代理服务器中缓存着用户请求的资源，就将其直接返回给用户</li>
</ul>
</li>
<li>使用CDN和反向代理一方面加快用户访问速度，另一方面也减轻后端服务器的负载压力 </li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server6.png" alt=""></p>
<h2 id="使用分布式文件系统和分布式数据库系统"><a href="#使用分布式文件系统和分布式数据库系统" class="headerlink" title="使用分布式文件系统和分布式数据库系统"></a>使用分布式文件系统和分布式数据库系统</h2><ul>
<li>分布式数据库是网站数据库拆分的最后手段，只有在单表数据规模非常庞大的时候才使用。不到不得已时，网站更常用的数据库拆分手段是业务拆分，<strong>将不同的业务的数据库部署在不同的物理服务器上</strong></li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server7.png" alt=""></p>
<h2 id="使用NoSQL和搜索引擎"><a href="#使用NoSQL和搜索引擎" class="headerlink" title="使用NoSQL和搜索引擎"></a>使用NoSQL和搜索引擎</h2><ul>
<li>随着网站业务越来越复杂，对数据存储的检索需求也越来越复杂，网站需要采用一些非关系型数据库如NoSQL和非数据库查询技术如搜索引擎</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server8.png" alt=""></p>
<h2 id="业务拆分"><a href="#业务拆分" class="headerlink" title="业务拆分"></a>业务拆分</h2><ul>
<li>大型网站为了应对复杂的业务场景，通过将整个网站业务分成不同的产品线，如大型购物交易网站就会将首页、商铺、订单、买家、卖家等拆分成不同的产品线</li>
<li>具体到技术：将一个网站拆分成许多不同的应用，每个应用独立部署维护</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server9.png" alt=""></p>
<h2 id="分布式服务"><a href="#分布式服务" class="headerlink" title="分布式服务"></a>分布式服务</h2><ul>
<li>既然每一个应用系统都需要执行许多相同的业务操作，比如用户管理、商品管理等，那么可以将这些共用的业务提取出来，独立部署。由这些可复用的业务连接数据库，提供共用业务服务，而应用系统只需要管理用户界面，通过分布式服务调用共用业务服务完成具体业务操作</li>
</ul>
<p><img src="http://opsi4gg7g.bkt.clouddn.com/server10.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;大型网站架构演化&quot;&gt;&lt;a href=&quot;#大型网站架构演化&quot; class=&quot;headerlink&quot; title=&quot;大型网站架构演化&quot;&gt;&lt;/a&gt;大型网站架构演化&lt;/h1&gt;&lt;h2 id=&quot;初始阶段的网站架构&quot;&gt;&lt;a href=&quot;#初始阶段的网站架构&quot; class=&quot;headerlink&quot; title=&quot;初始阶段的网站架构&quot;&gt;&lt;/a&gt;初始阶段的网站架构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;小型网站最开始没有多少人访问，只需要一台服务器就绰绰有余&lt;/li&gt;
&lt;li&gt;应用程序、数据库、文件等所有的资源都放在一台服务器上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://opsi4gg7g.bkt.clouddn.com/server1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://blog.golearns.org/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="集群" scheme="http://blog.golearns.org/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="分布式" scheme="http://blog.golearns.org/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="读写分离" scheme="http://blog.golearns.org/tags/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
    
      <category term="CND" scheme="http://blog.golearns.org/tags/CND/"/>
    
      <category term="反向代理" scheme="http://blog.golearns.org/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>jsonp</title>
    <link href="http://blog.golearns.org/2017/05/07/jsonp/"/>
    <id>http://blog.golearns.org/2017/05/07/jsonp/</id>
    <published>2017-05-07T07:34:55.000Z</published>
    <updated>2017-05-07T07:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h1><h2 id="新建一个web客户端"><a href="#新建一个web客户端" class="headerlink" title="新建一个web客户端"></a>新建一个web客户端</h2><ul>
<li><p>index.jsp</p>
<pre><code>&lt;html&gt;
    &lt;body&gt;
        &lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.js&quot;&gt;&lt;/script&gt;
        &lt;script&gt;
        $(function() {
            $.ajax({
                url: &apos;http://192.168.0.1:8080/spring_mybatis/getUser?callback=?&apos;,
                dataType: &apos;jsonp&apos;,
                success: function(data) {
                    console.log(data)
                }
            });
        });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
</ul>
<a id="more"></a>
<h2 id="web服务端"><a href="#web服务端" class="headerlink" title="web服务端"></a>web服务端</h2><ul>
<li><p>新建JsonpAdvice.java</p>
<pre><code>@ControllerAdvice
public class JsonpAdvice extends AbstractJsonpResponseBodyAdvice {

    public JsonpAdvice() {
        super(&quot;callback&quot;);
    }
}
</code></pre></li>
<li><p>UserController.java</p>
<pre><code>@Controller
public class UserController {
    @RequestMapping(value=&quot;getUser&quot;, produces=MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Map&lt;String, String&gt; getUser() {
        Map&lt;String, String&gt; maps = new HashMap&lt;&gt;();
        maps.put(&quot;username&quot;, &quot;zhangsan&quot;);
        maps.put(&quot;password&quot;, &quot;123456&quot;);
        return maps;
    }
}
</code></pre></li>
<li><p>返回</p>
<pre><code>Object {password: &quot;123456&quot;, username: &quot;zhangsan&quot;}
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;jsonp&quot;&gt;&lt;a href=&quot;#jsonp&quot; class=&quot;headerlink&quot; title=&quot;jsonp&quot;&gt;&lt;/a&gt;jsonp&lt;/h1&gt;&lt;h2 id=&quot;新建一个web客户端&quot;&gt;&lt;a href=&quot;#新建一个web客户端&quot; class=&quot;headerlink&quot; title=&quot;新建一个web客户端&quot;&gt;&lt;/a&gt;新建一个web客户端&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;index.jsp&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;script src=&amp;quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script&amp;gt;
        $(function() {
            $.ajax({
                url: &amp;apos;http://192.168.0.1:8080/spring_mybatis/getUser?callback=?&amp;apos;,
                dataType: &amp;apos;jsonp&amp;apos;,
                success: function(data) {
                    console.log(data)
                }
            });
        });
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="jsonp" scheme="http://blog.golearns.org/categories/jsonp/"/>
    
    
      <category term="jsonp" scheme="http://blog.golearns.org/tags/jsonp/"/>
    
      <category term="springmvc" scheme="http://blog.golearns.org/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>mybatis逆向工程</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis逆向工程/</id>
    <published>2017-05-07T06:20:42.000Z</published>
    <updated>2017-05-07T06:24:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-逆向工程"><a href="#mybatis-逆向工程" class="headerlink" title="mybatis 逆向工程"></a>mybatis 逆向工程</h1><ul>
<li>新建maven simple project</li>
<li><p>pom.xml </p>
<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;5.1.40&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;3.4.1&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;1.2.17&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;
        &lt;version&gt;1.3.5&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.12&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre></li>
</ul>
<a id="more"></a>    
<ul>
<li><p>创建generatorConfig.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE generatorConfiguration
  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;

&lt;generatorConfiguration&gt;
    &lt;!-- 无Example查询条件内容 --&gt;
    &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;
    &lt;!-- 有Example查询条件内容 --&gt;
    &lt;!-- &lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; --&gt;
        &lt;commentGenerator&gt;
            &lt;!-- 是否去除自动生成的注释 --&gt;
            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;
        &lt;/commentGenerator&gt;

        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;
            connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot; userId=&quot;root&quot; password=&quot;123456&quot;&gt;
        &lt;/jdbcConnection&gt;

        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为Integer，
            为true时把 JDBC DECIMAL 和 NUMERIC 解析为 java.math.BigDecimal--&gt;
        &lt;javaTypeResolver&gt;
            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;
        &lt;/javaTypeResolver&gt;

        &lt;!-- targetPackage: 生成Entity类的路径 --&gt;
        &lt;javaModelGenerator targetPackage=&quot;com.example.mybatis.entity&quot;
            targetProject=&quot;src&quot;&gt;
            &lt;!-- 是否让schema作为包的后缀 --&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;
            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;
            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;
        &lt;/javaModelGenerator&gt;

        &lt;!-- 映射文件生成的路径 --&gt;
        &lt;sqlMapGenerator targetPackage=&quot;com.example.mybatis.mapper&quot;
            targetProject=&quot;src&quot;&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;
        &lt;/sqlMapGenerator&gt;

        &lt;!-- mapper接口生成的路径 --&gt;
        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;
            targetPackage=&quot;com.example.mybatis.mapper&quot; targetProject=&quot;src&quot;&gt;
            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;
        &lt;/javaClientGenerator&gt;

        &lt;!-- 数据库表名字和entity类映射 --&gt;
        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;&gt;&lt;/table&gt;
        &lt;!-- &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;&gt;&lt;/table&gt;
        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;&gt;&lt;/table&gt;
        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;&gt;&lt;/table&gt;
        &lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot;&gt;&lt;/table&gt; --&gt;

    &lt;/context&gt;
&lt;/generatorConfiguration&gt;
</code></pre><ul>
<li><p>新建Main.java</p>
<pre><code>public static void main(String[] args) throws Exception {
    List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();
    boolean overwrite = true;
    URL url = ClassLoader.getSystemResource(&quot;generatorConfig.xml&quot;);
    File configFile = new File(url.toURI());
    ConfigurationParser cp = new ConfigurationParser(warnings);
    Configuration config = cp.parseConfiguration(configFile);
    DefaultShellCallback callback = new DefaultShellCallback(overwrite);
    MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
    myBatisGenerator.generate(null);
}
</code></pre></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis-逆向工程&quot;&gt;&lt;a href=&quot;#mybatis-逆向工程&quot; class=&quot;headerlink&quot; title=&quot;mybatis 逆向工程&quot;&gt;&lt;/a&gt;mybatis 逆向工程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;新建maven simple project&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pom.xml &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;5.1.40&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-generator-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.3.5&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-spring-springmvc</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis-spring-springmvc/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis-spring-springmvc/</id>
    <published>2017-05-07T06:09:37.000Z</published>
    <updated>2017-05-07T06:18:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis整合spring和springmvc"><a href="#mybatis整合spring和springmvc" class="headerlink" title="mybatis整合spring和springmvc"></a>mybatis整合spring和springmvc</h1><h2 id="新建Maven-webapps"><a href="#新建Maven-webapps" class="headerlink" title="新建Maven webapps"></a>新建Maven webapps</h2><ul>
<li><p>pom.xml</p>
<pre><code>&lt;profiles&gt;
    &lt;profile&gt;
        &lt;activation&gt;
            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;jdk&gt;1.8&lt;/jdk&gt;
        &lt;/activation&gt;
        &lt;properties&gt;
            &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
            &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;
            &lt;java.version&gt;1.8&lt;/java.version&gt;
            &lt;mybatis.version&gt;3.4.1&lt;/mybatis.version&gt;
            &lt;mysql.version&gt;5.1.40&lt;/mysql.version&gt;
            &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;
            &lt;junit.version&gt;4.12&lt;/junit.version&gt;
            &lt;mybatis.ehcache.version&gt;1.1.0&lt;/mybatis.ehcache.version&gt;
            &lt;spring.version&gt;4.3.7.RELEASE&lt;/spring.version&gt;
            &lt;servlet.api.version&gt;3.1.0&lt;/servlet.api.version&gt;
            &lt;jstl.version&gt;1.2&lt;/jstl.version&gt;
            &lt;jackson.version&gt;2.8.7&lt;/jackson.version&gt;
            &lt;c3p0.version&gt;0.9.5.2&lt;/c3p0.version&gt;
            &lt;mybatis.spring.version&gt;1.3.1&lt;/mybatis.spring.version&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;
&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
        &lt;version&gt;${servlet.api.version}&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;jstl&lt;/artifactId&gt;
        &lt;version&gt;${jstl.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
        &lt;version&gt;${jackson.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;${mysql.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;${spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.mchange&lt;/groupId&gt;
        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;
        &lt;version&gt;${c3p0.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;${mybatis.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;${log4j.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;
        &lt;version&gt;${mybatis.ehcache.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
        &lt;version&gt;${mybatis.spring.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;${junit.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre></li>
<li>Maven -&gt; Update project</li>
</ul>
<a id="more"></a>
<h2 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h2><pre><code>&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee 
      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;
version=&quot;3.0&quot;&gt;

    &lt;filter&gt;
        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;
        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;encoding&lt;/param-name&gt;
            &lt;param-value&gt;UTF-8&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/filter&gt;
    &lt;filter-mapping&gt;
        &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;springDispatcherServlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

&lt;/web-app&gt;
</code></pre><h2 id="新建springmvc-xml"><a href="#新建springmvc-xml" class="headerlink" title="新建springmvc.xml"></a>新建springmvc.xml</h2><pre><code>&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;

&lt;context:component-scan base-package=&quot;com.example.springAndMybatis&quot;&gt;&lt;/context:component-scan&gt;

&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
    &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;user&quot; value=&quot;${jdbc.user}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driverClass}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.jdbcUrl}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;initialPoolSize&quot; value=&quot;${jdbc.initPoolSize}&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;maxPoolSize&quot; value=&quot;${jdbc.maxPoolSize}&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.example.springAndMybatis.mybatis&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;&gt;&lt;/property&gt;
    &lt;!-- 扫描类路径下mapper下的所有xml --&gt;
    &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;constructor-arg name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;

&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;
    &lt;property name=&quot;basePackage&quot; value=&quot;com.example.springAndMybatis.mybatis&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;

&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;
&lt;mvc:annotation-driven  /&gt;
&lt;mvc:default-servlet-handler/&gt;
</code></pre><h2 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h2><pre><code>jdbc.user=root
jdbc.password=123456
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true
jdbc.initPoolSize=5
jdbc.maxPoolSize=10
</code></pre><h2 id="mybatis-xml"><a href="#mybatis-xml" class="headerlink" title="mybatis.xml"></a>mybatis.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE configuration
  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
&lt;/configuration&gt;
</code></pre><h2 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.example.springAndMybatis.mybatis.UserMapper&quot;&gt;
    &lt;select id=&quot;getUser&quot; parameterType=&quot;Integer&quot; resultType=&quot;com.example.springAndMybatis.model.User&quot;&gt;
        select id, username, password, email from user where id = #{id}
    &lt;/select&gt;

    &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.example.springAndMybatis.model.User&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
        insert into user(username, password, email) value(#{username}, #{password}, #{email})
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre><h2 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h2><pre><code>public interface UserMapper {

    public User getUser(Integer id);

    public void addUser(User user);
}
</code></pre><h2 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h2><pre><code>@Service
@Transactional(readOnly=true)
public class UserService {

    @Autowired
    private UserMapper userMapper;

    public User getUser(Integer id) {
        return userMapper.getUser(id);
    }

    @Transactional(isolation=Isolation.DEFAULT, propagation=Propagation.REQUIRED, readOnly=false, rollbackFor=Exception.class)
    public void addUser(User user) {
        userMapper.addUser(user);
    }
}
</code></pre><h2 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h2><pre><code>@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @RequestMapping(&quot;user&quot;)
    public String user(@RequestParam(&quot;username&quot;) String username) {
        System.out.println(&quot;username: &quot; + username);

        User user = userService.getUser(1);
        System.out.println(&quot;user: &quot; + user);

        user = new User();
        user.setUsername(&quot;zhaoliuxxx&quot;);
        user.setPassword(&quot;123456&quot;);
        user.setEmail(&quot;zhaoliu@qq.com&quot;);
        userService.addUser(user);
        System.out.println(&quot;result: &quot; + user.getId());

        return &quot;user&quot;;
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis整合spring和springmvc&quot;&gt;&lt;a href=&quot;#mybatis整合spring和springmvc&quot; class=&quot;headerlink&quot; title=&quot;mybatis整合spring和springmvc&quot;&gt;&lt;/a&gt;mybatis整合spring和springmvc&lt;/h1&gt;&lt;h2 id=&quot;新建Maven-webapps&quot;&gt;&lt;a href=&quot;#新建Maven-webapps&quot; class=&quot;headerlink&quot; title=&quot;新建Maven webapps&quot;&gt;&lt;/a&gt;新建Maven webapps&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pom.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
        &amp;lt;activation&amp;gt;
            &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
            &amp;lt;jdk&amp;gt;1.8&amp;lt;/jdk&amp;gt;
        &amp;lt;/activation&amp;gt;
        &amp;lt;properties&amp;gt;
            &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
            &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
            &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt;
            &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt;
            &amp;lt;maven.compiler.compilerVersion&amp;gt;1.8&amp;lt;/maven.compiler.compilerVersion&amp;gt;
            &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
            &amp;lt;mybatis.version&amp;gt;3.4.1&amp;lt;/mybatis.version&amp;gt;
            &amp;lt;mysql.version&amp;gt;5.1.40&amp;lt;/mysql.version&amp;gt;
            &amp;lt;log4j.version&amp;gt;1.2.17&amp;lt;/log4j.version&amp;gt;
            &amp;lt;junit.version&amp;gt;4.12&amp;lt;/junit.version&amp;gt;
            &amp;lt;mybatis.ehcache.version&amp;gt;1.1.0&amp;lt;/mybatis.ehcache.version&amp;gt;
            &amp;lt;spring.version&amp;gt;4.3.7.RELEASE&amp;lt;/spring.version&amp;gt;
            &amp;lt;servlet.api.version&amp;gt;3.1.0&amp;lt;/servlet.api.version&amp;gt;
            &amp;lt;jstl.version&amp;gt;1.2&amp;lt;/jstl.version&amp;gt;
            &amp;lt;jackson.version&amp;gt;2.8.7&amp;lt;/jackson.version&amp;gt;
            &amp;lt;c3p0.version&amp;gt;0.9.5.2&amp;lt;/c3p0.version&amp;gt;
            &amp;lt;mybatis.spring.version&amp;gt;1.3.1&amp;lt;/mybatis.spring.version&amp;gt;
        &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;
&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-aspects&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${servlet.api.version}&amp;lt;/version&amp;gt;
        &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;jstl&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${jstl.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.fasterxml.jackson.core&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;jackson-databind&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${jackson.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${mysql.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-jdbc&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;com.mchange&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;c3p0&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${c3p0.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${mybatis.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${log4j.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis.caches&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-ehcache&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${mybatis.ehcache.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-spring&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${mybatis.spring.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${junit.version}&amp;lt;/version&amp;gt;
        &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Maven -&amp;gt; Update project&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="springmvc" scheme="http://blog.golearns.org/tags/springmvc/"/>
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
      <category term="spring" scheme="http://blog.golearns.org/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-cache</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis-cache/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis-cache/</id>
    <published>2017-05-07T05:54:46.000Z</published>
    <updated>2017-05-07T06:18:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-cache"><a href="#mybatis-cache" class="headerlink" title="mybatis cache"></a>mybatis cache</h1><blockquote>
<p>mybatis提供一级缓存和二级缓存</p>
</blockquote>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><ul>
<li><p>sqlSession级别的缓存，会话缓存，当sqlSession关闭会话结束，缓存失效。</p>
<pre><code>@Test
public void findUser() {
    try (SqlSession session = sqlSessionFactory.openSession();
            SqlSession session2 = sqlSessionFactory.openSession()) {
        UserMapper userMapper = session.getMapper(UserMapper.class);
        User user = userMapper.getUserById(1);
        System.out.println(user);
        session.close();

        UserMapper userMapper1 = session2.getMapper(UserMapper.class);
        User user1 = userMapper1.getUserById(1);
        System.out.println(user1);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre></li>
<li>第一次查询用户信息，如果缓存中不存在，去数据库中查询。然后把用户信息保存在一级缓存中。</li>
<li>默认所有的select语句都会被缓存<code>useCache=&quot;true&quot;</code></li>
<li>当操作insert,update 和 delete 语句会刷新缓存。<code>flushCache=&quot;true&quot;</code></li>
</ul>
<a id="more"></a>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><ul>
<li>二级缓存的范围更大，多个sqlSession可以共享二级缓存。</li>
<li><p>开启二级缓存</p>
<pre><code>&lt;settings&gt;
    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
&lt;/settings&gt;
</code></pre></li>
<li>JavaBean文件实现<code>Serializable</code>序列化接口</li>
<li><p>在Mapper映射文件中加入</p>
<pre><code>&lt;!-- 
    eviction缓存策略：FIFO，先进先出，按对象进入缓存的顺序移除
    flushInterval: 每隔60s刷新缓存
    缓存列表大小为512个并且是只读的
--&gt;
&lt;cache
  eviction=&quot;FIFO&quot;
  flushInterval=&quot;60000&quot;
  size=&quot;512&quot;
  readOnly=&quot;true&quot;/&gt;
</code></pre><h2 id="使用EhCache缓存"><a href="#使用EhCache缓存" class="headerlink" title="使用EhCache缓存"></a>使用EhCache缓存</h2></li>
<li><p>添加ehcache.xml</p>
<pre><code>&lt;ehcache&gt;
    &lt;diskStore path=&quot;java.io.tmpdir/mybatis-ehcache&quot;/&gt;
    &lt;defaultCache
        maxElementsInMemory=&quot;1000&quot;
        maxElementsOnDisk=&quot;10000000&quot;
        eternal=&quot;false&quot;
        timeToIdleSeconds=&quot;120&quot;
        timeToLiveSeconds=&quot;120&quot;
        overflowToDisk=&quot;false&quot;
        diskPersistent=&quot;false&quot;
        diskExpiryThreadIntervalSeconds=&quot;120&quot;
        memoryStoreEvictionPolicy=&quot;LRU&quot;
    /&gt;
&lt;/ehcache&gt;
</code></pre></li>
<li><p>在Mapper映射文件中配置</p>
<pre><code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;&lt;/cache&gt;
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis-cache&quot;&gt;&lt;a href=&quot;#mybatis-cache&quot; class=&quot;headerlink&quot; title=&quot;mybatis cache&quot;&gt;&lt;/a&gt;mybatis cache&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;mybatis提供一级缓存和二级缓存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一级缓存&quot;&gt;&lt;a href=&quot;#一级缓存&quot; class=&quot;headerlink&quot; title=&quot;一级缓存&quot;&gt;&lt;/a&gt;一级缓存&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sqlSession级别的缓存，会话缓存，当sqlSession关闭会话结束，缓存失效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void findUser() {
    try (SqlSession session = sqlSessionFactory.openSession();
            SqlSession session2 = sqlSessionFactory.openSession()) {
        UserMapper userMapper = session.getMapper(UserMapper.class);
        User user = userMapper.getUserById(1);
        System.out.println(user);
        session.close();

        UserMapper userMapper1 = session2.getMapper(UserMapper.class);
        User user1 = userMapper1.getUserById(1);
        System.out.println(user1);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;第一次查询用户信息，如果缓存中不存在，去数据库中查询。然后把用户信息保存在一级缓存中。&lt;/li&gt;
&lt;li&gt;默认所有的select语句都会被缓存&lt;code&gt;useCache=&amp;quot;true&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当操作insert,update 和 delete 语句会刷新缓存。&lt;code&gt;flushCache=&amp;quot;true&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-多表关联操作</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis-%E5%A4%9A%E8%A1%A8%E5%85%B3%E8%81%94%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis-多表关联操作/</id>
    <published>2017-05-07T04:38:44.000Z</published>
    <updated>2017-05-07T05:09:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis多表关联"><a href="#mybatis多表关联" class="headerlink" title="mybatis多表关联"></a>mybatis多表关联</h1><ul>
<li><p>表结构</p>
<pre><code>CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `icard` int(11) NOT NULL DEFAULT &apos;0&apos;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE `idCard` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `card` char(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
</code></pre></li>
</ul>
<a id="more"></a>    
<ul>
<li>创建User和IDCard的javabean文件</li>
<li><p><code>UserMapper</code></p>
<pre><code>public interface UserMapper {

    public Integer addUser(User user);

    public void delUser(Integer id);

    public void updateUser(User user);

    public User getUserById(Integer id);

    public List&lt;User&gt; getAll();

    // 和idCard表关联
    public User getUserAndCardById(Integer id);
}
</code></pre></li>
<li><p><code>UserMapper.xml</code></p>
<pre><code>&lt;resultMap type=&quot;com.example.mybatis.model.IDCard&quot; id=&quot;cardResultMap&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;card&quot; column=&quot;card&quot;/&gt;
&lt;/resultMap&gt;
&lt;resultMap type=&quot;com.example.mybatis.model.User&quot; id=&quot;userCardResultMap&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;
    &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;
    &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
    &lt;association property=&quot;card&quot; column=&quot;icard&quot; columnPrefix=&quot;card_&quot; resultMap=&quot;cardResultMap&quot;&gt;&lt;/association&gt;
&lt;/resultMap&gt;
&lt;select id=&quot;getUserAndCardById&quot; parameterType=&quot;Integer&quot;
    resultType=&quot;com.example.mybatis.model.User&quot; resultMap=&quot;userCardResultMap&quot;&gt;
    select
        u.id as id,
        u.username as username,
        u.password as password,
        u.email as email,
        c.id as card_id,
        c.card as card_card
    from user u left join idCard c on u.icard = c.id
    where u.id = #{id}
&lt;/select&gt;
</code></pre></li>
<li><p>测试文件</p>
<pre><code>@Test
public void testGetUserAndCardById() {
    try (SqlSession session = sessionFactory.openSession()) {
        UserMapper userMapper = session.getMapper(UserMapper.class);
        User user = userMapper.getUserAndCardById(1);
        System.out.println(user);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre></li>
</ul>
<h2 id="第二种关联方式"><a href="#第二种关联方式" class="headerlink" title="第二种关联方式"></a>第二种关联方式</h2><ul>
<li><p>新建<code>CardMapper.java</code></p>
<pre><code>public interface CardMapper {

    public IDCard getCard(Integer id);
}
</code></pre></li>
<li><p>新建<code>CardMapper.xml</code></p>
<pre><code>&lt;mapper namespace=&quot;com.example.mybatis.mapper.CardMapper&quot;&gt;
    &lt;select id=&quot;getCard&quot; parameterType=&quot;Integer&quot; resultType=&quot;com.example.mybatis.model.IDCard&quot;&gt;
        select id, card from idCard where id = #{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre></li>
<li><p>加入<code>mybatis-config.xml</code></p>
<pre><code>&lt;mapper resource=&quot;CardMapper.xml&quot;/&gt;
</code></pre></li>
<li><p><code>UserMapper.xml</code>配置</p>
<pre><code>&lt;resultMap type=&quot;com.example.mybatis.model.User&quot; id=&quot;userAndCardResultMap&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;
    &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;
    &lt;result property=&quot;email&quot; column=&quot;email&quot;/&gt;
    &lt;!-- 注意这里 --&gt;
    &lt;association property=&quot;card&quot; column=&quot;icard&quot; select=&quot;com.example.mybatis.mapper.CardMapper.getCard&quot; /&gt;
&lt;/resultMap&gt;
&lt;select id=&quot;getUserAndCardById&quot; parameterType=&quot;Integer&quot; 
    resultType=&quot;com.example.mybatis.model.User&quot; resultMap=&quot;userAndCardResultMap&quot;&gt;
    select id, username, password, email, icard from user where id = #{id}
&lt;/select&gt;
</code></pre></li>
</ul>
<h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><ul>
<li><p><code>UserMapperAnnotation.java</code>添加</p>
<pre><code>@Select(&quot;select id, username, password, email, icard from user where id = #{id}&quot;)
@Results({
    @Result(id=true, property=&quot;id&quot;, column=&quot;id&quot;),
    @Result(property=&quot;username&quot;, column=&quot;username&quot;),
    @Result(property=&quot;password&quot;, column=&quot;password&quot;),
    @Result(property=&quot;email&quot;, column=&quot;email&quot;),
    @Result(property=&quot;card&quot;, column=&quot;icard&quot;, one=@One(select=&quot;com.example.mybatis.mapper.CardMapper.getCard&quot;))
})
public User getUserAndCardById(Integer id);
</code></pre></li>
<li><p>测试</p>
<pre><code>@Test
public void testGetUserAndCardById() {
    try (SqlSession session = sessionFactory.openSession()) {
        UserMapperAnnotation mapper = session.getMapper(UserMapperAnnotation.class);
        User user = mapper.getUserAndCardById(1);
        System.out.println(user.getUsername());
        System.out.println(user.getCard());
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis多表关联&quot;&gt;&lt;a href=&quot;#mybatis多表关联&quot; class=&quot;headerlink&quot; title=&quot;mybatis多表关联&quot;&gt;&lt;/a&gt;mybatis多表关联&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL,
  `icard` int(11) NOT NULL DEFAULT &amp;apos;0&amp;apos;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE `idCard` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `card` char(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-注解操作</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis-%E6%B3%A8%E8%A7%A3%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis-注解操作/</id>
    <published>2017-05-07T04:31:50.000Z</published>
    <updated>2017-05-07T05:10:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis注解"><a href="#mybatis注解" class="headerlink" title="mybatis注解"></a>mybatis注解</h1><ul>
<li><p>新建<code>UserMapperAnnotation.java</code>文件</p>
<pre><code>public interface UserMapperAnnotation {

    @Insert(&quot;insert into user(username, password, email) values(#{username}, #{password}, #{email})&quot;)
    @Options(useGeneratedKeys=true, keyProperty=&quot;id&quot;)
    public Integer addUser(User user);

    @Delete(&quot;delete from user where id = #{id}&quot;)
    public void delUser(Integer id);

    @Update(&quot;update user set password = #{password} where id = #{id}&quot;)
    public void updateUser(User user);

    @Select(&quot;select id, username, password, email from user where id = #{id}&quot;)
    public User getUserById(Integer id);

    @Select(&quot;select id, username, password, email from user&quot;)
    public List&lt;User&gt; getAll();
}
</code></pre></li>
</ul>
<a id="more"></a>    
<ul>
<li><p>在mybatis-config.xml中添加</p>
<pre><code>&lt;mappers&gt;
    &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;
    &lt;mapper class=&quot;com.example.mybatis.mapper.UserMapperAnnotation&quot;/&gt;
&lt;/mappers&gt;
</code></pre></li>
<li><p>新建测试文件</p>
<pre><code>public class TestUserMapperAnnotation {

    private SqlSessionFactory sessionFactory;

    @Before
    public void init() throws IOException {
        InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);
        sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    }

    @Test
    public void testGetAll() {
        try (SqlSession session = sessionFactory.openSession()) {
            UserMapperAnnotation mapper = session.getMapper(UserMapperAnnotation.class);
            List&lt;User&gt; lists = mapper.getAll();
            System.out.println(lists);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis注解&quot;&gt;&lt;a href=&quot;#mybatis注解&quot; class=&quot;headerlink&quot; title=&quot;mybatis注解&quot;&gt;&lt;/a&gt;mybatis注解&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新建&lt;code&gt;UserMapperAnnotation.java&lt;/code&gt;文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface UserMapperAnnotation {

    @Insert(&amp;quot;insert into user(username, password, email) values(#{username}, #{password}, #{email})&amp;quot;)
    @Options(useGeneratedKeys=true, keyProperty=&amp;quot;id&amp;quot;)
    public Integer addUser(User user);

    @Delete(&amp;quot;delete from user where id = #{id}&amp;quot;)
    public void delUser(Integer id);

    @Update(&amp;quot;update user set password = #{password} where id = #{id}&amp;quot;)
    public void updateUser(User user);

    @Select(&amp;quot;select id, username, password, email from user where id = #{id}&amp;quot;)
    public User getUserById(Integer id);

    @Select(&amp;quot;select id, username, password, email from user&amp;quot;)
    public List&amp;lt;User&amp;gt; getAll();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-操作</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis-%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis-操作/</id>
    <published>2017-05-07T04:09:39.000Z</published>
    <updated>2017-05-07T05:09:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis操作"><a href="#mybatis操作" class="headerlink" title="mybatis操作"></a>mybatis操作</h1><ul>
<li><p>表结构</p>
<pre><code>CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
</code></pre></li>
</ul>
<a id="more"></a>    
<ul>
<li>创建Java Bean文件<code>User.java</code></li>
<li><p>创建<code>UserMapper.java</code>接口文件</p>
<pre><code>public interface UserMapper {

    public Integer addUser(User user);
    public void delUser(Integer id);
    public void updateUser(User user);
    public User getUserById(Integer id);
    public List&lt;User&gt; getAll();
}
</code></pre></li>
<li><p>在类路径下创建<code>UserMapper.xml</code></p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;com.example.mybatis.mapper.UserMapper&quot;&gt;
    &lt;insert id=&quot;addUser&quot; parameterType=&quot;com.example.mybatis.model.User&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;
        insert into user(username, password, email) values(#{username}, #{password}, #{email})
    &lt;/insert&gt;
    &lt;delete id=&quot;delUser&quot; parameterType=&quot;Integer&quot;&gt;
        delete from user where id = #{id}
    &lt;/delete&gt;
    &lt;update id=&quot;updateUser&quot; parameterType=&quot;com.example.mybatis.model.User&quot;&gt;
        update user set password = #{password} where id = #{id}
    &lt;/update&gt;
    &lt;select id=&quot;getUserById&quot; resultType=&quot;com.example.mybatis.model.User&quot; parameterType=&quot;Integer&quot;&gt;
        select id, username, password, email from user where id = #{id}
    &lt;/select&gt;
    &lt;select id=&quot;getAll&quot; resultType=&quot;com.example.mybatis.model.User&quot;&gt;
        select id, username, password, email from user
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre></li>
<li><p>在mybatis-config.xml的configuration标签里加入</p>
<pre><code>&lt;mappers&gt;
    &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;
&lt;/mappers&gt;
</code></pre></li>
<li><p>创建junit测试文件</p>
<pre><code>public class TestUserMapper {

    private SqlSessionFactory sessionFactory;

    @Before
    public void init() throws IOException {
        InputStream inputStream = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);
        sessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    }

    @Test
    public void testAddUser() {
        try (SqlSession session = sessionFactory.openSession()) {
            UserMapper userMapper = session.getMapper(UserMapper.class);
            User user = new User(&quot;lisi&quot;, &quot;123456&quot;, &quot;lisi@qq.com&quot;);
            userMapper.addUser(user);
            session.commit();

            System.out.println(&quot;last user id: &quot; + user.getId());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testDelUser() {
        try (SqlSession session = sessionFactory.openSession()) {
            UserMapper userMapper = session.getMapper(UserMapper.class);
            userMapper.delUser(10);
            session.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testUpdateUser() {
        try (SqlSession session = sessionFactory.openSession()) {
            UserMapper userMapper = session.getMapper(UserMapper.class);
            User user = new User();
            user.setId(1);
            user.setPassword(&quot;654321&quot;);
            userMapper.updateUser(user);
            session.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testGetUserById() {
        try (SqlSession session = sessionFactory.openSession()) {
            UserMapper userMapper = session.getMapper(UserMapper.class);
            User user = userMapper.getUserById(1);
            System.out.println(user);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testGetAll() {
        try (SqlSession session = sessionFactory.openSession()) {
            UserMapper userMapper = session.getMapper(UserMapper.class);
            List&lt;User&gt; lists = userMapper.getAll();
            System.out.println(lists);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis操作&quot;&gt;&lt;a href=&quot;#mybatis操作&quot; class=&quot;headerlink&quot; title=&quot;mybatis操作&quot;&gt;&lt;/a&gt;mybatis操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;表结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(100) NOT NULL,
  `password` varchar(100) DEFAULT NULL,
  `email` varchar(100) DEFAULT NULL
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis环境安装</title>
    <link href="http://blog.golearns.org/2017/05/07/mybatis%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>http://blog.golearns.org/2017/05/07/mybatis环境安装/</id>
    <published>2017-05-07T02:08:54.000Z</published>
    <updated>2017-05-07T05:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis环境安装"><a href="#mybatis环境安装" class="headerlink" title="mybatis环境安装"></a>mybatis环境安装</h1><h2 id="Eclipse插件安装"><a href="#Eclipse插件安装" class="headerlink" title="Eclipse插件安装"></a>Eclipse插件安装</h2><pre><code>Help -&gt; Eclipse Marketplace -&gt; Search -&gt; MyBatipse -&gt; install
</code></pre><a id="more"></a>    
<h2 id="新建maven-project-simple-project"><a href="#新建maven-project-simple-project" class="headerlink" title="新建maven project(simple project)"></a>新建maven project(simple project)</h2><ul>
<li><p>pom.xml</p>
<pre><code>&lt;profiles&gt;
    &lt;profile&gt;
        &lt;activation&gt;
            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;
            &lt;jdk&gt;1.8&lt;/jdk&gt;
        &lt;/activation&gt;
        &lt;properties&gt;
            &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
            &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;
            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;
            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;
            &lt;java.version&gt;1.8&lt;/java.version&gt;
            &lt;mybatis.version&gt;3.4.1&lt;/mybatis.version&gt;
            &lt;mysql.version&gt;5.1.40&lt;/mysql.version&gt;
            &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;
            &lt;junit.version&gt;4.12&lt;/junit.version&gt;
            &lt;mybatis.ehcache.version&gt;1.1.0&lt;/mybatis.ehcache.version&gt;
        &lt;/properties&gt;
    &lt;/profile&gt;
&lt;/profiles&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
        &lt;version&gt;${mybatis.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;${mysql.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;log4j&lt;/groupId&gt;
        &lt;artifactId&gt;log4j&lt;/artifactId&gt;
        &lt;version&gt;${log4j.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;
        &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;
        &lt;version&gt;${mybatis.ehcache.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;${junit.version}&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre><ul>
<li>maven -&gt; update project</li>
<li><p>resources下创建mybatis-config.xml</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE configuration
  PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
&lt;configuration&gt;
    &lt;!-- 数据库配置文件 --&gt;
    &lt;properties resource=&quot;jdbc.properties&quot;&gt;&lt;/properties&gt;
    &lt;settings&gt;
        &lt;!-- 开启缓存和懒加载 --&gt;
        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;
        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;
        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;
        &lt;!-- 日志使用log4j --&gt;
        &lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;
    &lt;/settings&gt;
    &lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot; /&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driverClass}&quot; /&gt;
                &lt;property name=&quot;url&quot; value=&quot;${jdbc.jdbcUrl}&quot; /&gt;
                &lt;property name=&quot;username&quot; value=&quot;${jdbc.user}&quot; /&gt;
                &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;
            &lt;/dataSource&gt;
        &lt;/environment&gt;
    &lt;/environments&gt;
&lt;/configuration&gt;
</code></pre></li>
<li><p>创建jdbc.properties</p>
<pre><code>jdbc.user=root
jdbc.password=123456
jdbc.driverClass=com.mysql.jdbc.Driver
jdbc.jdbcUrl=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true
</code></pre></li>
<li><p>log4j.properties</p>
<pre><code>log4j.rootLogger=DEBUG, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m %n

# General Apache libraries
log4j.logger.org.apache=WARN

# Disable verbose logging
log4j.java.sql=DEBUG
log4j.category.org.apache.ibatis=DEBUG
</code></pre></li>
<li><p>为了方便提示</p>
<pre><code>下载:
    http://mybatis.org/dtd/mybatis-3-mapper.dtd
    http://mybatis.org/dtd/mybatis-3-config.dtd

Eclise -&gt; 偏好设置 -&gt; XML -&gt; XML Catalog -&gt; add
</code></pre><p>  <img src="http://7xj3i5.com1.z0.glb.clouddn.com/mybatisConfig.png" alt="mybatis-config">
  <img src="http://7xj3i5.com1.z0.glb.clouddn.com/mybatisMapper.png" alt="mybatis-mapper"></p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mybatis环境安装&quot;&gt;&lt;a href=&quot;#mybatis环境安装&quot; class=&quot;headerlink&quot; title=&quot;mybatis环境安装&quot;&gt;&lt;/a&gt;mybatis环境安装&lt;/h1&gt;&lt;h2 id=&quot;Eclipse插件安装&quot;&gt;&lt;a href=&quot;#Eclipse插件安装&quot; class=&quot;headerlink&quot; title=&quot;Eclipse插件安装&quot;&gt;&lt;/a&gt;Eclipse插件安装&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;Help -&amp;gt; Eclipse Marketplace -&amp;gt; Search -&amp;gt; MyBatipse -&amp;gt; install
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="mybatis" scheme="http://blog.golearns.org/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://blog.golearns.org/tags/mybatis/"/>
    
  </entry>
  
</feed>
